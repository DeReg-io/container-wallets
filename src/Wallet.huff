/**
 * @dev Slot determined by. `keccak256("eip1967.proxy.implementation") - 1`
 * @dev Storage layout
 * +-----------+------------+----------------------------+
 * | Bit Range | Type       | Description                |
 * +-----------+------------+----------------------------+
 * | 0-159     |   address  |  Proxy implementation      |
 * | 160-223   |  <64 bits> |  Extra data                |
 * | 224-231   |   uint8    |  Config data word size     |
 * | 232-255   |   uint24   |  Config data storage nonce |
 * +-----------+------------+----------------------------+
 */

#define constant IMPL_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc
// Hash of compiled bytecode `0x6365d6aa8a5f525f5f6004601c335afa3d5f5f3e3d5ff3`.
#define constant CONTAINER_INIT_HASH = 0x2d0458a407fa25a99863f50be5660c5522853fcce3855a63e11abd049b9488a6

#define constant BASE_SIZE = 0xc2
#define function initialize(bytes) nonpayable returns ()


#define macro CONSTRUCTOR() = takes(0) returns(0) {
    // -- Prepare Initialize Call.
    __FUNC_SIG(initialize) msize mstore // []
    msize msize mstore                  // []
    __codesize(CONSTRUCTOR) __codesize(MAIN) add
    dup1                                // [base_size, base_size]
    codesize sub                        // [config_size, base_size]
    dup1                                // [config_size, config_size, base_size]
    msize mstore                        // [config_size, base_size]
    dup1 dup3 msize                     // [0x60, base_size, config_size, config_size, base_size]
    codecopy                            // [config_size, base_size]

    // -- Execute Intializing Call.
    push0 push0                         // [0, 0, config_size, base_size]
    swap2                               // [config_size, 0, 0, base_size]
    0x44 add                            // [payload_size, 0, 0, base_size]
    0x1c                                // [28, payload_size, 0, 0, base_size]
    caller gas delegatecall             // [success, base_size]

    // -- Bubble Revert If Failed.
    no_cstr_revert jumpi                // [base_size]
        returndatasize push0 push0      // [0, 0, rdz, base_size]
        returndatacopy                  // [base_size]
        returndatasize push0            // [0, rdz, base_size]
        revert
    no_cstr_revert:                     // [base_size]

    // -- Return Main Code.
    dup1 push0 push0                    // [0, 0, base_size, base_size]
    codecopy                            // [base_size]
    push0                               // [0, base_size]
    return
}

#define macro MAIN() = takes(0) returns(0) {
    // -- Prepare Config Data Load.
    push0                              // [0]
    [IMPL_SLOT] sload                  // [core_data, 0]
    dup1 0xdb shr 0x1fe and            // [config_byte_size, core_data, 0]
    dup1                               // [config_byte_size, config_byte_size, core_data, 0]
    push0 calldatasize                 // [cdz, 0, config_byte_size, core_data, 0]

    // -- Derive Config Data Container Address.
    address msize mstore               // [cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    0x55 0xb                           // [0xb, 0x55, cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    0xff dup2 mstore8                  // [0xb, 0x55, cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    dup3 0xe8 shr                      // [config_nonce, 0xb, 0x55, cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    msize mstore                       // [0xb, 0x55, cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    [CONTAINER_INIT_HASH] msize mstore // [0xb, 0x55, cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    0x55 0xb sha3                      // [container_addr_dirty, cdz, 0, config_byte_size, config_byte_size, core_data, 0]

    // -- Load Config Data.
    extcodecopy                        // [config_byte_size, core_data, 0]

    // -- Load Calldata.
    push0 push0 calldatasize           // [cdz, 0, 0, config_byte_size, core_data, 0]
    calldatacopy                       // [config_byte_size, core_data, 0]

    // -- Store Size.
    dup1 calldatasize add              // [var_payload_offset, config_byte_size, core_data, 0]
    swap1                              // [config_byte_size, var_payload_offset, core_data, 0]
    dup2 mstore                        // [var_payload_offset, core_data, 0]

    // -- Store Core Data.
    dup2                               // [core_data, var_payload_offset, core_data, 0]
    dup2 0x20 add                      // [core_offset, core_data, var_payload_offset, core_data, 0]
    mstore                             // [var_payload_offset, core_data, 0]

    // -- Delegatecall.
    0x40 add                           // [payload_size, core_data, 0]
    push0 push0                        // [0, 0, payload_size, core_data, 0]
    swap3                              // [core_data, 0, payload_size, 0, 0]
    gas delegatecall                   // [success]

    // -- Copy Returndata.
    returndatasize push0 push0         // [0, 0, rdz, success]
    returndatacopy                     // [success]

    no_revert jumpi                    // []
        returndatasize push0 revert
    no_revert:
        returndatasize push0 return
}
