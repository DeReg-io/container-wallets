/**
 * @dev Slot determined by. `keccak256("eip1967.proxy.implementation") - 1`
 * @dev Storage layout
 * +-----------+------------+----------------------------+
 * | Bit Range | Type       | Description                |
 * +-----------+------------+----------------------------+
 * | 0-159     |   address  |  Proxy implementation      |
 * | 160-223   |  <64 bits> |  Extra data                |
 * | 224-231   |   uint8    |  Config data word size     |
 * | 232-255   |   uint24   |  Config data storage nonce |
 * +-----------+------------+----------------------------+
 */

#define constant IMPL_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc
// Hash of compiled bytecode `0x6365d6aa8a5f525f5f6004601c335afa3d5f5f3e3d5ff3`.
#define constant CONTAINER_INIT_HASH = 0xb926d5f9997ae396c520af832d4f8bfc53f8b1d5e2d7f106c55c91180ee6430a

#define macro CONSTRUCTOR() = takes(0) returns(0) {
    caller [IMPL_SLOT] sstore // []

    __codesize(MAIN) dup1     // [main_size, main_size]
    __codesize(CONSTRUCTOR)   // [cstr_size, main_size, main_size]
    0x0                       // [0, cstr_size, main_size, main_size]
    codecopy                  // [main_size]

    0x00                      // [0, main_size]
    return
}

#define macro MAIN() = takes(0) returns(0) {
    // -- Prepare Config Data Load.
    0x0                              // [0]
    [IMPL_SLOT] sload                  // [core_data, 0]
    dup1 0xdb shr 0x1fe and            // [config_byte_size, core_data, 0]
    dup1                               // [config_byte_size, config_byte_size, core_data, 0]
    0x0 calldatasize                 // [cdz, 0, config_byte_size, core_data, 0]

    // -- Derive Config Data Container Address.
    address msize mstore               // [cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    0x55 0xb                           // [0xb, 0x55, cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    0xff dup2 mstore8                  // [0xb, 0x55, cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    dup7 0xe8 shr                      // [config_nonce, 0xb, 0x55, cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    msize mstore                       // [0xb, 0x55, cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    [CONTAINER_INIT_HASH] msize mstore // [0xb, 0x55, cdz, 0, config_byte_size, config_byte_size, core_data, 0]
    sha3                               // [container_addr_dirty, cdz, 0, config_byte_size, config_byte_size, core_data, 0]

    // -- Load Config Data.
    extcodecopy                        // [config_byte_size, core_data, 0]

    // -- Load Calldata.
    calldatasize 0x0 0x0           // [cdz, 0, 0, config_byte_size, core_data, 0]
    calldatacopy                       // [config_byte_size, core_data, 0]

    // -- Store Size.
    dup1 calldatasize add              // [var_payload_offset, config_byte_size, core_data, 0]
    swap1                              // [config_byte_size, var_payload_offset, core_data, 0]
    dup2 mstore                        // [var_payload_offset, core_data, 0]

    // -- Store Core Data.
    dup2                               // [core_data, var_payload_offset, core_data, 0]
    dup2 0x20 add                      // [core_offset, core_data, var_payload_offset, core_data, 0]
    mstore                             // [var_payload_offset, core_data, 0]

    // -- Delegatecall.
    0x40 add                           // [payload_size, core_data, 0]
    0x0 0x0                        // [0, 0, payload_size, core_data, 0]
    swap3                              // [core_data, 0, payload_size, 0, 0]
    gas delegatecall                   // [success]

    // -- Copy Returndata.
    returndatasize 0x0 0x0         // [0, 0, rdz, success]
    returndatacopy                     // [success]

    no_revert jumpi                    // []
        returndatasize 0x0 revert
    no_revert:
        returndatasize 0x0 return
}
